version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}
    netdataconfig:
    netdatalib:
    netdatacache:

networks:
  front-tier:
  back-tier:

services:
  # SOURCE: https://doc.traefik.io/traefik/user-guides/docker-compose/basic-example/
  # SOURCE: https://doc.traefik.io/traefik/user-guides/docker-compose/basic-example/
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.scarlettlab.home`)"
      - "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.services.node-exporter.loadbalancer.server.port=100080"
    expose:
      - 100080
    environment:
    - TZ=UTC
    - WHOAMI_PORT=100080
    ports:
    - 100080:100080


  # docker pull prom/prometheus:v2.31.1
  prometheus:
    image: prom/prometheus:v2.31.1
    container_name: prometheus
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.prometheus.rule=Host(`prometheus.scarlettlab.home`)"
    - "traefik.http.routers.prometheus.entrypoints=web"
    - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    expose:
    - 9090
    tty: true
    stdin_open: true
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:9090'
      - '--log.level=debug'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
#      - pushgateway:pushgateway
    depends_on:
      - cadvisor
#      - pushgateway
    networks:
      - back-tier
    restart: always
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}
    environment:
    - TZ=UTC

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.node-exporter.rule=Host(`node-exporter.scarlettlab.home`)"
    - "traefik.http.routers.node-exporter.entrypoints=web"
    - "traefik.http.services.node-exporter.loadbalancer.server.port=9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    expose:
    - 9100
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global
    environment:
    - TZ=UTC

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.scarlettlab.home`)"
    - "traefik.http.routers.alertmanager.entrypoints=web"
    - "traefik.http.services.prometheus.loadbalancer.server.port=9093"
    tty: true
    stdin_open: true
    expose:
    - 9093
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      # - '-v'
      # - '--alertmanager.url=http://localhost:9093'
    environment:
    - TZ=UTC
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.scarlettlab.home`)"
    - "traefik.http.routers.cadvisor.entrypoints=web"
    - "traefik.http.services.cadvisor.loadbalancer.server.port=8081"
    expose:
    - 8080
    - 8081
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8081
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global
    environment:
    - TZ=UTC
  blackbox:
    image: prom/blackbox-exporter
    container_name: blackbox
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.blackbox.rule=Host(`blackbox.scarlettlab.home`)"
    - "traefik.http.routers.blackbox.entrypoints=web"
    - "traefik.http.services.blackbox.loadbalancer.server.port=9115"
    tty: true
    stdin_open: true
    ports:
    - 9115:9115
    expose:
    - 9115
    # volumes:
    #   - /:/rootfs:ro
    #   - /var/run:/var/run:rw
    #   - /sys:/sys:ro
    #   - /var/lib/docker/:/var/lib/docker:ro
    volumes:
    - ./blackbox/config:/config
    command:
      - '--config.file=/config/blackbox.yml'
      - '--web.listen-address=:9115'
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global
    environment:
    - TZ=UTC

  grafana:
    image: grafana/grafana
    container_name: grafana
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.grafana.rule=Host(`grafana.scarlettlab.home`)"
    - "traefik.http.routers.grafana.entrypoints=web"
    - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    user: "472"
    depends_on:
      - prometheus
    expose:
    - 3000
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always
    environment:
    - TZ=UTC


  # scope:
  #   image: weaveworks/scope:latest
  #   container_name: scope
  #   network_mode: "host"
  #   pid: "host"
  #   privileged: true
  #   labels:
  #     - "works.weave.role=system"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:rw"
  #   command:
  #     - "--probe.docker=true"
  #   restart: unless-stopped
  #   cap_add:
  #     - SYS_PTRACE
  #   security_opt:
  #     - apparmor:unconfined

  # # SOURCE docker run --rm -v /var/run/docker.sock:/var/run/docker.sock leoverto/docker-network-graph
  # networkgraph:
  #   image: leoverto/docker-network-graph
  #   container_name: networkgraph
  #   cap_add:
  #     - ALL
  #   security_opt:
  #     - apparmor:unconfined
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock

  #   depends_on:
  #     - prometheus
  #   networks:
  #     - back-tier
  #     - front-tier
  #   tty: true
  #   stdin_open: true
  #   command:
  #   - '-f'
  #   - '/dev/null'
  #   entrypoint: "tail"
  #   environment:
  #   - TZ=UTC
  zsh:
    image: ubuntu:focal
    container_name: zsh
    # hostname: example.com # set to fqdn of host
    # ports:
    #   - 19999:19999
    restart: unless-stopped
    cap_add:
      - ALL
    security_opt:
      - apparmor:unconfined
    volumes:
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    depends_on:
      - prometheus
    networks:
      - back-tier
      - front-tier
    tty: true
    stdin_open: true
    command:
    - '-f'
    - '/dev/null'
    entrypoint: "tail"
    environment:
    - TZ=UTC
  #  apt-get update;
  #  apt-get install bash-completion zsh git net-tools curl wget dnsutils sudo vim build-essential -y;
  #  wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh
  #  chmod +x install.sh
  #  ./install.sh
  #  mkdir -p /usr/local/src;
  #  git clone https://github.com/bossjones/debug-tools /usr/local/src/debug-tools;
  #  curl -L 'https://raw.githubusercontent.com/bossjones/debug-tools/master/install-config-sample-ubuntu' > /usr/local/bin/install-config
  #  sed -i 's,10.3.0,16.11.1,g' /usr/local/bin/install-config
  #  cat /usr/local/bin/install-config
  #  cd /usr/local/src/debug-tools;
  #  ./update-bossjones-debug-tools
  #  export TZ=UTC
  #  ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

    # apt-get install -y \
    # apache2-utils \
    # bash \
    # bind-tools \
    # bird \
    # bridge-utils \
    # busybox-extras \
    # calicoctl \
    # conntrack-tools \
    # ctop \
    # curl \
    # dhcping \
    # drill \
    # ethtool \
    # file \
    # fping \
    # httpie \
    # iftop \
    # iperf \
    # iproute2 \
    # ipset \
    # iptables \
    # iptraf-ng \
    # iputils \
    # ipvsadm \
    # jq \
    # libc6-compat \
    # liboping \
    # mtr \
    # net-snmp-tools \
    # netcat-openbsd \
    # netgen \
    # nftables \
    # ngrep \
    # nmap \
    # nmap-nping \
    # openssl \
    # py-crypto \
    # py2-virtualenv \
    # python2 \
    # scapy \
    # socat \
    # strace \
    # tcpdump \
    # tcptraceroute \
    # termshark \
    # tshark \
    # util-linux \
    # vim \
    # websocat \
    # nethogs

    # export PYENV_VERSIONS_TO_INSTALL="3.9.0\n"
    # export PYENV_ROOT=/.pyenv
    # export PATH="${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:$PATH"
    # export RBENV_ROOT=~/.rbenv
    # export RBENV_VERSION=2.7.2
    # export NODE_VERSION_TO_INSTALL=16.11.1
    # export PATH="$HOME/.fnm:${RBENV_ROOT}/shims:${RBENV_ROOT}/bin:$PATH"


#  pushgateway:
#    image: prom/pushgateway
#    restart: always
#    expose:
#      - 9091
#    ports:
#      - "9091:9091"
#    networks:
#      - back-tier

  # netdata:
  #   image: netdata/netdata
  #   container_name: netdata
  #   hostname: example.com # set to fqdn of host
  #   ports:
  #     - 19999:19999
  #   restart: unless-stopped
  #   cap_add:
  #     - SYS_PTRACE
  #   security_opt:
  #     - apparmor:unconfined
  #   volumes:
  #     - netdataconfig:/etc/netdata
  #     - netdatalib:/var/lib/netdata
  #     - netdatacache:/var/cache/netdata
  #     - /etc/passwd:/host/etc/passwd:ro
  #     - /etc/group:/host/etc/group:ro
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /etc/os-release:/host/etc/os-release:ro
  #   depends_on:
  #   - grafana
