version: '3.7'
# Since only root has access to /var/lib/docker and I'm running the Grafana agent under its own user on the host itself, changing the permissions to that directory seemed like a bad idea to me. After a bit of research I figured out how to make this work using the journald driver, which works nicely.
# SOURCE: https://gist.github.com/ruanbekker/c6fa9bc6882e6f324b4319c5e3622460?permalink_comment_id=4009155#gistcomment-4009155
{% raw %}
x-logging:
  &default-logging
  driver: "journald"
  options:
    tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

# for the unifipoller bits
# https://github.com/unpoller/unpoller/blob/master/init/docker/docker-compose.yml
volumes:
    prometheus_data: {}
    grafana_data: {}
    netdataconfig:
    netdatalib:
    netdatacache:
    influxdb-storage:
    chronograf-storage:
    grafana-storage:
{% endraw %}

{% raw %}
services:
  # SOURCE: https://doc.traefik.io/traefik/user-guides/docker-compose/basic-example/
  # SOURCE: https://doc.traefik.io/traefik/user-guides/docker-compose/basic-example/
  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}

  whoami:
    image: "traefik/whoami:v1.8.0"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.{{ fqdn }}`)"
      - "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.services.whoami.loadbalancer.server.port=10080"
    expose:
      - 10080
    environment:
    - TZ=UTC
    - WHOAMI_PORT_NUMBER=10080
    - WHOAMI_NAME=whoami
    ports:
    - 10080:10080
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}

  influxdb:
    restart: always
    image: influxdb:1.8
    container_name: influxdb
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.influxdb.rule=Host(`influxdb.{{ fqdn }}`)"
    - "traefik.http.routers.influxdb.entrypoints=web"
    - "traefik.http.services.influxdb.loadbalancer.server.port=8086"
    ports:
      - '8086:8086'
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=${INFLUXDB_DB}
      - INFLUXDB_HTTP_AUTH_ENABLED=${INFLUXDB_HTTP_AUTH_ENABLED}
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - TZ=UTC
    env_file:
      - ./env
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}

  chronograf:
    restart: always
    image: chronograf:latest
    container_name: chronograf
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.chronograf.rule=Host(`chronograf.{{ fqdn }}`)"
    - "traefik.http.routers.chronograf.entrypoints=web"
    - "traefik.http.services.chronograf.loadbalancer.server.port=8888"
    ports:
      - '8888:8888'
    volumes:
      - chronograf-storage:/var/lib/chronograf
    depends_on:
      - influxdb
    environment:
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_USERNAME=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - TZ=UTC
    env_file:
      - ./env
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}

  # docker pull prom/prometheus:v2.31.1
  prometheus:
    image: prom/prometheus:v2.31.1
    container_name: prometheus
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.prometheus.rule=Host(`prometheus.{{ fqdn }}`)"
    - "traefik.http.routers.prometheus.entrypoints=web"
    - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    expose:
    - 9090
    tty: true
    stdin_open: true
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:9090'
      - '--log.level=info'
    ports:
      - 9090:9090
    links:
{% if cadvisor_feature_flag %}
      - cadvisor:cadvisor
{% endif %}
      - alertmanager:alertmanager
    depends_on:
{% if cadvisor_feature_flag %}
      - cadvisor
{% endif %}
      - alertmanager
    restart: always

    environment:
    - TZ=UTC
    # SEE: https://stackoverflow.com/questions/31324981/how-to-access-host-port-from-docker-container/43541732#43541732
    # https://stackoverflow.com/questions/56909896/prometheus-in-docker-container-cannot-scrape-target-on-host/56910057
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.node-exporter.rule=Host(`node-exporter.{{ fqdn }}`)"
    - "traefik.http.routers.node-exporter.entrypoints=web"
    - "traefik.http.services.node-exporter.loadbalancer.server.port=9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    expose:
    - 9100
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global
    environment:
    - TZ=UTC
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.{{ fqdn }}`)"
    - "traefik.http.routers.alertmanager.entrypoints=web"
    - "traefik.http.services.prometheus.loadbalancer.server.port=9093"
    tty: true
    stdin_open: true
    expose:
    - 9093
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    environment:
    - TZ=UTC
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}

{% if cadvisor_feature_flag %}
  cadvisor:
    # SOURCE: https://github.com/rafaribe/home-ops/blob/d9e283fd3ddc42a9891c8a12fe82fa128657798a/provision/ansible/backup-server/roles/syncthing/templates/agent.yml
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    privileged: true
    userns_mode: "host"
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.{{ fqdn }}`)"
    - "traefik.http.routers.cadvisor.entrypoints=web"
    - "traefik.http.services.cadvisor.loadbalancer.server.port=8081"
    volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
        - /dev/disk/:/dev/disk:ro
        - /etc/machine-id/:/etc/machine-id:ro
    devices:
        - /dev/kmsg:/dev/kmsg:ro
    ports:
        - "8081:8081"
    expose:
      - 8081
    restart: always
    entrypoint:
      - /usr/bin/cadvisor
      # - --v=6
      - '--listen_ip=0.0.0.0'
      - '--port=8081'
      - --logtostderr
    env_file:
      - ./env
    environment:
    - TZ=UTC
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}
{% endif %}

  blackbox:
    image: prom/blackbox-exporter
    privileged: true
    container_name: blackbox
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.blackbox.rule=Host(`blackbox.{{ fqdn }}`)"
    - "traefik.http.routers.blackbox.entrypoints=web"
    - "traefik.http.services.blackbox.loadbalancer.server.port=9115"
    tty: true
    stdin_open: true
    ports:
    - "9115:9115/tcp"
    - "9115:9115/udp"
    expose:
    - 9115
    volumes:
    - ./blackbox/config:/config
    command:
      - '--config.file=/config/blackbox.yml'
      - '--web.listen-address=:9115'

    restart: always
    deploy:
      mode: global
    environment:
    - TZ=UTC
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}

  heimdall:
    image: linuxserver/heimdall
    build: ./docker-heimdall
    container_name: heimdall
    restart: always
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    volumes:
      - ./docker-heimdall/config:/config
    ports:
      - 4040:4040
      - 4443:4443
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.heimdall.rule=Host(`heimdall.{{ fqdn }}`)"
    - "traefik.http.routers.heimdall.entrypoints=web"
    - "traefik.http.services.heimdall.loadbalancer.server.port=4040"
    tty: true
    stdin_open: true
    expose:
    - 4040
    - 4443
{% raw %}
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
{% endraw %}


  unifi-poller:
    restart: always
    image: ghcr.io/unpoller/unpoller:${POLLER_TAG}
    ports:
      - "9130:9130/tcp"
      - "9130:9130/udp"
      - "37288:37288"
    container_name: unifi-poller
    tty: true
    stdin_open: true
    env_file:
      - ./env
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.unifipoller.rule=Host(`unifi-poller.{{ fqdn }}`)"
    - "traefik.http.routers.unifipoller.entrypoints=web"
    - "traefik.http.services.unifipoller.loadbalancer.server.port=37288"
    depends_on:
      - influxdb
      - grafana
    environment:
    - UP_WEBSERVER_ENABLE=true

  grafana:
    image: grafana/grafana
    container_name: grafana
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.grafana.rule=Host(`grafana.{{ fqdn }}`)"
    - "traefik.http.routers.grafana.entrypoints=web"
    - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    depends_on:
      - prometheus
    expose:
    - 3000
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./env
    restart: always
    environment:
    - TZ=UTC
    - GF_INSTALL_PLUGINS=grafana-clock-panel,natel-discrete-panel,grafana-piechart-panel
